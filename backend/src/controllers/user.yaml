/users:
  get:
    tags:
      - Users
    summary: Returns list of users. Admin only.
    security:
      - bearerAuth: []
    responses:
      200:
        description: A JSON array of users.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      401:
        $ref: "#/components/responses/Unauthorized"
      403:
        $ref: "#/components/responses/Unauthorized2"
  post:
    tags:
      - Users
    summary: Create a new user.
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - managerFirstName
              - managerLastName
              - mail
              - pseudo
            properties:
              managerFirstName:
                type: string
                description: User theme.
                maxLength: 50
              managerLastName:
                type: string
                description: User scenario.
                maxLength: 50
              mail:
                type: string
                description: User language.
                maxLength: 150
              level:
                type: string
                description: User title.
                maxLength: 50
              pseudo:
                type: string
                maxLength: 50
              languageCode:
                type: string
                minLength: 2
                maxLength: 2
              schoolId:
                type: integer
              password:
                type: string
                format: password
              type:
                type: integer
                description: Admin only can edit user type (0 -> class, 1 -> admin_class, 2 -> super_admin)
                enum:
                  - 0
                  - 1
                  - 2
                x-enum-varnames:
                  - Class
                  - Admin_Class
                  - Super_Admin
    responses:
      200:
        description: The new user with login access token.
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/User"
                accessToken:
                  type: string
                  description: JWT accessToken
      401:
        $ref: "#/components/responses/Unauthorized"
      403:
        $ref: "#/components/responses/Unauthorized2"
      500:
        $ref: "#/components/responses/InternalError"

/users/{userId}:
  get:
    tags:
      - Users
    summary: Return the user with userId.
    security:
      - bearerAuth: []
    parameters:
      - name: userId
        in: path
        required: true
        description: The ID of the user to return.
        schema:
          type: integer
          format: int64
          minimum: 1
    responses:
      200:
        description: The JSON object user.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      401:
        $ref: "#/components/responses/Unauthorized"
      403:
        $ref: "#/components/responses/Unauthorized2"
      404:
        $ref: "#/components/responses/NotFound"
  put:
    tags:
      - Users
    summary: Update the user by userId. only self user.
    security:
      - bearerAuth: []
    parameters:
      - name: userId
        in: path
        required: true
        description: The ID of the user to update.
        schema:
          type: integer
          format: int64
          minimum: 1
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              managerFirstName:
                type: string
                description: User theme.
                maxLength: 50
              managerLastName:
                type: string
                description: User scenario.
                maxLength: 50
              mail:
                type: string
                description: User language.
                maxLength: 150
              level:
                type: string
                description: User title.
                maxLength: 50
              pseudo:
                type: string
                maxLength: 50
              languageCode:
                type: string
                minLength: 2
                maxLength: 2
              schoolId:
                type: integer
    responses:
      200:
        description: The updated user.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      401:
        $ref: "#/components/responses/Unauthorized"
      403:
        $ref: "#/components/responses/Unauthorized2"
      404:
        $ref: "#/components/responses/NotFound"
      500:
        $ref: "#/components/responses/InternalError"
  delete:
    tags:
      - Users
    summary: Delete the user with userId. Admin only.
    security:
      - bearerAuth: []
    parameters:
      - name: userId
        in: path
        required: true
        description: The ID of the user to delete.
        schema:
          type: integer
          format: int64
          minimum: 1
    responses:
      204:
        description: User succesfully deleted.
      401:
        $ref: "#/components/responses/Unauthorized"
      403:
        $ref: "#/components/responses/Unauthorized2"
      500:
        $ref: "#/components/responses/InternalError"

/users/test-pseudo/{pseudo}:
  get:
    tags:
      - Users
    summary: Test user pseudo availability.
    parameters:
      - name: pseudo
        in: path
        required: true
        description: The user pseudo to test availability.
        schema:
          type: string
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                available:
                  type: boolean
      500:
        $ref: "#/components/responses/InternalError"
